// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using SmartFactory.Infrastructure.Data;

#nullable disable

namespace SmartFactory.Infrastructure.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    [Migration("20221223050807_PositionType")]
    partial class PositionType
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "6.0.12")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder, 1L, 1);

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles", (string)null);

                    b.HasData(
                        new
                        {
                            Id = "7eef1923-b5cf-41b5-9ca7-acd1107446a2",
                            ConcurrencyStamp = "fa2ca1a5-e9d4-4d07-899b-2e8537663382",
                            Name = "factoryManager",
                            NormalizedName = "factoryManager"
                        },
                        new
                        {
                            Id = "0a9eb5bf-c65b-4f8d-9d5c-da3d6537683d",
                            ConcurrencyStamp = "9e2681ea-93fb-448c-8840-e1e982c2573a",
                            Name = "Manager",
                            NormalizedName = "Manager"
                        },
                        new
                        {
                            Id = "71b1fb4c-6b83-434a-b8d0-2d4dfe3b1b9d",
                            ConcurrencyStamp = "0070bc5f-05e0-4169-bd52-6096e85c0ffe",
                            Name = "Electrical",
                            NormalizedName = "Electrical"
                        },
                        new
                        {
                            Id = "32d1dbb3-e785-47a1-ab5a-982603422fbd",
                            ConcurrencyStamp = "8c2e01b5-a78d-4187-ba52-357c52228e99",
                            Name = "Operator",
                            NormalizedName = "Operator"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUser", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("AspNetUsers", (string)null);

                    b.HasData(
                        new
                        {
                            Id = "dea12856-c198-4129-b3f3-b893d8395082",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "573218a9-92c8-4170-88ba-d801f7344ce6",
                            Email = "factoryManager@mail.com",
                            EmailConfirmed = false,
                            LockoutEnabled = false,
                            NormalizedEmail = "factoryManager@mail.com",
                            NormalizedUserName = "factoryManager@mail.com",
                            PasswordHash = "AQAAAAEAACcQAAAAEPskH0YkNBnk4jlxBJPfruutPntZBe5q6f9laoBkCEEfRCPjwTFBU2j41Bxu9USrTw==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "672060ee-6fae-4fe3-8a80-981213d5951f",
                            TwoFactorEnabled = false,
                            UserName = "factoryManager@mail.com"
                        },
                        new
                        {
                            Id = "6d5800ce-d726-4fc8-83d9-d6b3ac1f591e",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "973c17d3-5064-4311-9941-8cfc32e30d05",
                            Email = "supervisor@mail.com",
                            EmailConfirmed = false,
                            LockoutEnabled = false,
                            NormalizedEmail = "supervisor@mail.com",
                            NormalizedUserName = "supervisor@mail.com",
                            PasswordHash = "AQAAAAEAACcQAAAAED2Sstx7CHnjDqXBwRNR4ljDIXmGnG5noueG8eCVFraG8wcnguroNNfm3nE+frtVww==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "5dc84768-6d06-4417-a3c8-4fac57f77197",
                            TwoFactorEnabled = false,
                            UserName = "supervisor@mail.com"
                        },
                        new
                        {
                            Id = "64a268d0-e995-41a0-a640-f9defb7f6f85",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "274ceba5-5755-49fc-847d-f4ab9c79ce91",
                            Email = "operator1@mail.com",
                            EmailConfirmed = false,
                            LockoutEnabled = false,
                            NormalizedEmail = "operator1@mail.com",
                            NormalizedUserName = "operator1@mail.com",
                            PasswordHash = "AQAAAAEAACcQAAAAEPa0KI6G+sTG5sLl8ePZTJUAEmF+jVeb/lj+NavN3N028NYt00vCHzFeIAMpieSOCQ==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "d2b4fc06-3a78-4270-82fd-a0b91e072254",
                            TwoFactorEnabled = false,
                            UserName = "operator1@mail.com"
                        },
                        new
                        {
                            Id = "7e07d5d6-f082-454c-91c4-4c101a91aee0",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "67b467de-5b90-4367-b863-460bf09f125c",
                            Email = "operator2@mail.com",
                            EmailConfirmed = false,
                            LockoutEnabled = false,
                            NormalizedEmail = "operator2@mail.com",
                            NormalizedUserName = "operator2@mail.com",
                            PasswordHash = "AQAAAAEAACcQAAAAEHFenQWgXmO/cgDiaZQK7pgscsUPvk8dDAvyddvmhbLkJvWpGPkxBvdQJ04jkKXA2A==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "43fe17ec-1b7f-440c-be7d-ed48e3fa2011",
                            TwoFactorEnabled = false,
                            UserName = "operator2@mail.com"
                        },
                        new
                        {
                            Id = "82ebe75b-2512-4a2f-af3d-b9edf0d1ef5b",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "02df4620-aa69-4b86-adef-6607f2976d82",
                            Email = "operator3@mail.com",
                            EmailConfirmed = false,
                            LockoutEnabled = false,
                            NormalizedEmail = "operator3@mail.com",
                            NormalizedUserName = "operator3@mail.com",
                            PasswordHash = "AQAAAAEAACcQAAAAEOdV8JkCG5PHHZVJEJOzNDhGBYe0ruUsj5Di36Ronp8CxNZRa6kLi+eHnXUDoYc+GA==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "76731577-5d1e-4157-9527-efc9f4dd117f",
                            TwoFactorEnabled = false,
                            UserName = "operator3@mail.com"
                        },
                        new
                        {
                            Id = "c77fc444-d5a0-45c2-a576-667a021b6d1f",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "e0cebea5-060f-4fe2-b277-cf02a771caf1",
                            Email = "operator4@mail.com",
                            EmailConfirmed = false,
                            LockoutEnabled = false,
                            NormalizedEmail = "operator4@mail.com",
                            NormalizedUserName = "operator4@mail.com",
                            PasswordHash = "AQAAAAEAACcQAAAAEDXWpduTM8l+vEfXTV2mck30m1QKbc4/QB2DRXvtXdcURbPfoojzJauFrM3OFZYuYg==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "a8913614-b486-4774-94ff-35a4fd398d7c",
                            TwoFactorEnabled = false,
                            UserName = "operator4@mail.com"
                        },
                        new
                        {
                            Id = "25cb202d-9873-432c-b049-f9184c3ce525",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "ce069347-9b2c-4aaa-9a92-455120c7e83b",
                            Email = "electrician1@mail.com",
                            EmailConfirmed = false,
                            LockoutEnabled = false,
                            NormalizedEmail = "electrician1@mail.com",
                            NormalizedUserName = "electrician1@mail.com",
                            PasswordHash = "AQAAAAEAACcQAAAAEBtfJhgUYh0zdezNitb1ANNgbyZdflREIuopuqFVFeVPuUXqgE+hed3WT8zjezKX8Q==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "081e31ab-3ad2-448b-984e-eabaf3fe8b3b",
                            TwoFactorEnabled = false,
                            UserName = "electrician1@mail.com"
                        },
                        new
                        {
                            Id = "58434ec1-2216-4b26-869e-94db0c1f7d09",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "0af1ea51-03c7-4b9f-9dd4-535ed852942b",
                            Email = "electrician2@mail.com",
                            EmailConfirmed = false,
                            LockoutEnabled = false,
                            NormalizedEmail = "electrician2@mail.com",
                            NormalizedUserName = "electrician2@mail.com",
                            PasswordHash = "AQAAAAEAACcQAAAAENWVO6eOiScjwsuIba+pcbOHrZVF5Trkr/c2FV4XB7iR8ZDCO1YE0bPK0uUlEDTFkw==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "1fcaa19c-2e48-4add-9f45-4c184bcd3661",
                            TwoFactorEnabled = false,
                            UserName = "electrician2@mail.com"
                        },
                        new
                        {
                            Id = " 67905730 - 9c1f - 43fb - bf6b - e8dfd5abfd83",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "9c36e67e-1170-455e-8581-c0e5638e9ca3",
                            Email = "operatorleave@mail.com",
                            EmailConfirmed = false,
                            LockoutEnabled = false,
                            NormalizedEmail = "operatorleave@mail.com",
                            NormalizedUserName = "operatorleave@mail.com",
                            PasswordHash = "AQAAAAEAACcQAAAAENSyhuf2OmzNcJJwyozMHs9BSKiZ/lc5y6R57pTLOgDnPKZIsnGIcicoUdTAznkL9Q==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "9369e810-003e-43f6-bdce-a4e8c9f33dd5",
                            TwoFactorEnabled = false,
                            UserName = "operatorleave@mail.com"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("ProviderKey")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("RoleId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles", (string)null);

                    b.HasData(
                        new
                        {
                            UserId = "dea12856-c198-4129-b3f3-b893d8395082",
                            RoleId = "7eef1923-b5cf-41b5-9ca7-acd1107446a2"
                        },
                        new
                        {
                            UserId = "6d5800ce-d726-4fc8-83d9-d6b3ac1f591e",
                            RoleId = "0a9eb5bf-c65b-4f8d-9d5c-da3d6537683d"
                        },
                        new
                        {
                            UserId = "25cb202d-9873-432c-b049-f9184c3ce525",
                            RoleId = "71b1fb4c-6b83-434a-b8d0-2d4dfe3b1b9d"
                        },
                        new
                        {
                            UserId = "58434ec1-2216-4b26-869e-94db0c1f7d09",
                            RoleId = "71b1fb4c-6b83-434a-b8d0-2d4dfe3b1b9d"
                        },
                        new
                        {
                            UserId = "64a268d0-e995-41a0-a640-f9defb7f6f85",
                            RoleId = "32d1dbb3-e785-47a1-ab5a-982603422fbd"
                        },
                        new
                        {
                            UserId = "7e07d5d6-f082-454c-91c4-4c101a91aee0",
                            RoleId = "32d1dbb3-e785-47a1-ab5a-982603422fbd"
                        },
                        new
                        {
                            UserId = "82ebe75b-2512-4a2f-af3d-b9edf0d1ef5b",
                            RoleId = "32d1dbb3-e785-47a1-ab5a-982603422fbd"
                        },
                        new
                        {
                            UserId = "c77fc444-d5a0-45c2-a576-667a021b6d1f",
                            RoleId = "32d1dbb3-e785-47a1-ab5a-982603422fbd"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("LoginProvider")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("Name")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("SmartFactory.Infrastructure.Data.Career", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<DateTime>("DataOpen")
                        .HasColumnType("datetime2");

                    b.Property<int>("DaysActive")
                        .HasColumnType("int");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(5000)
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("PositionId")
                        .HasColumnType("int");

                    b.Property<string>("Qualifications")
                        .IsRequired()
                        .HasMaxLength(5000)
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("Id");

                    b.HasIndex("PositionId");

                    b.ToTable("Careers");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            DataOpen = new DateTime(2022, 12, 3, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DaysActive = 30,
                            Description = "1. Извършва подготвителни операции и монтаж на различни електрически инсталации. Следи за изправността, профилактиката и ремонта на електрическите мрежи, машини и съоръжения в сградите на работодателя.\r\nТрудови задачи и задължения, характеризиращи описанието на длъжността:\r\n2. Извършва монтаж и свързване на различни електрически табла;\r\n3. Извършва монтаж на елементите на електрообзавеждането или електро задвижването на производствени схеми;\r\n4. Следи за изправността на електрическите мрежи ,машини и съоръжения и определя необходимостта от ремонт.\r\n5. Прави профилактични проверка на техническото състояние на електрическите мрежи, машини и съоръжения.\r\n6. Извършва необходимият ремонт на електрическите мрежи, машини и съоръжения и отстранява технически повреди;\r\n7. Следи за правното прилагане на правилата за заземителните и гръмоотводните инсталации.\r\n8. Следи за изправността на измервателната техника .\r\n9. При необходимост изпълнява и други задачи, възложени във връзка с изпълнение на длъжността.",
                            PositionId = 3,
                            Qualifications = " Завършено висше/ средно образование с профил електротехника, електроенергетика и електрообзавеждане или автоматизация\r\n∙ Минимум 2 години опит по специалността в производствено предприятие",
                            Title = "Електротехник"
                        });
                });

            modelBuilder.Entity("SmartFactory.Infrastructure.Data.Employee", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("Address")
                        .IsRequired()
                        .HasMaxLength(150)
                        .HasColumnType("nvarchar(150)");

                    b.Property<int>("Age")
                        .HasColumnType("int");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<bool>("IsQuits")
                        .HasColumnType("bit");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<int?>("PositionId")
                        .HasColumnType("int");

                    b.Property<decimal>("Salary")
                        .HasColumnType("decimal(18,2)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("PositionId");

                    b.HasIndex("UserId");

                    b.ToTable("Employees");
                });

            modelBuilder.Entity("SmartFactory.Infrastructure.Data.Leave", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<DateTime>("DateLeave")
                        .HasColumnType("datetime2");

                    b.Property<int>("LeaveEmployeeId")
                        .HasColumnType("int");

                    b.Property<string>("Reason")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("LeaveEmployeeId");

                    b.ToTable("Leaves");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            DateLeave = new DateTime(2022, 11, 21, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            LeaveEmployeeId = 9,
                            Reason = "Пенсиониране по възраст"
                        });
                });

            modelBuilder.Entity("SmartFactory.Infrastructure.Data.Position", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(5000)
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("PositionType")
                        .HasColumnType("int");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("Id");

                    b.ToTable("Positions");
                });

            modelBuilder.Entity("SmartFactory.Infrastructure.Data.Production", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<int>("AfterShiftBufer")
                        .HasColumnType("int");

                    b.Property<string>("Coment")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ComentDetails")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("Date")
                        .HasColumnType("datetime2");

                    b.Property<bool>("HasBeenReported")
                        .HasColumnType("bit");

                    b.Property<int>("ProcuctionPackaging")
                        .HasColumnType("int");

                    b.Property<int>("ProductionPreparation")
                        .HasColumnType("int");

                    b.Property<int?>("ShiftId")
                        .HasColumnType("int");

                    b.Property<int>("StockBeforePacking")
                        .HasColumnType("int");

                    b.Property<int>("TypeOfShift")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("ShiftId");

                    b.ToTable("Productions");
                });

            modelBuilder.Entity("SmartFactory.Infrastructure.Data.Shift", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<DateTime>("Date")
                        .HasColumnType("datetime2");

                    b.Property<int>("ElectricianId")
                        .HasColumnType("int");

                    b.Property<int>("OperatorPackagingId")
                        .HasColumnType("int");

                    b.Property<int>("OperatorPreparationId")
                        .HasColumnType("int");

                    b.Property<int>("TypeOfShift")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("ElectricianId");

                    b.HasIndex("OperatorPackagingId");

                    b.HasIndex("OperatorPreparationId");

                    b.ToTable("Shifts");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("SmartFactory.Infrastructure.Data.Career", b =>
                {
                    b.HasOne("SmartFactory.Infrastructure.Data.Position", "Position")
                        .WithMany()
                        .HasForeignKey("PositionId");

                    b.Navigation("Position");
                });

            modelBuilder.Entity("SmartFactory.Infrastructure.Data.Employee", b =>
                {
                    b.HasOne("SmartFactory.Infrastructure.Data.Position", "Position")
                        .WithMany("Employees")
                        .HasForeignKey("PositionId");

                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Position");

                    b.Navigation("User");
                });

            modelBuilder.Entity("SmartFactory.Infrastructure.Data.Leave", b =>
                {
                    b.HasOne("SmartFactory.Infrastructure.Data.Employee", "LeaveEmployee")
                        .WithMany()
                        .HasForeignKey("LeaveEmployeeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("LeaveEmployee");
                });

            modelBuilder.Entity("SmartFactory.Infrastructure.Data.Production", b =>
                {
                    b.HasOne("SmartFactory.Infrastructure.Data.Shift", "Shift")
                        .WithMany()
                        .HasForeignKey("ShiftId");

                    b.Navigation("Shift");
                });

            modelBuilder.Entity("SmartFactory.Infrastructure.Data.Shift", b =>
                {
                    b.HasOne("SmartFactory.Infrastructure.Data.Employee", "Electrician")
                        .WithMany()
                        .HasForeignKey("ElectricianId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("SmartFactory.Infrastructure.Data.Employee", "OperatorPackaging")
                        .WithMany()
                        .HasForeignKey("OperatorPackagingId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("SmartFactory.Infrastructure.Data.Employee", "OperatorPreparation")
                        .WithMany()
                        .HasForeignKey("OperatorPreparationId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Electrician");

                    b.Navigation("OperatorPackaging");

                    b.Navigation("OperatorPreparation");
                });

            modelBuilder.Entity("SmartFactory.Infrastructure.Data.Position", b =>
                {
                    b.Navigation("Employees");
                });
#pragma warning restore 612, 618
        }
    }
}
