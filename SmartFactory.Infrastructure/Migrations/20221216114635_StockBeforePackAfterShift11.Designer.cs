// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using SmartFactory.Infrastructure.Data;

#nullable disable

namespace SmartFactory.Infrastructure.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    [Migration("20221216114635_StockBeforePackAfterShift11")]
    partial class StockBeforePackAfterShift11
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "6.0.9")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder, 1L, 1);

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUser", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("AspNetUsers", (string)null);

                    b.HasData(
                        new
                        {
                            Id = "dea12856-c198-4129-b3f3-b893d8395082",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "009eec0b-721a-4653-b365-f52becce6edb",
                            Email = "factoryManager@mail.com",
                            EmailConfirmed = false,
                            LockoutEnabled = false,
                            NormalizedEmail = "factoryManager@mail.com",
                            NormalizedUserName = "factoryManager@mail.com",
                            PasswordHash = "AQAAAAEAACcQAAAAEJke8vi0JBkm25uJGBc+zLyM3BCEsw8tNJkOtH9pBLsiRG5qA5PZWbjDlvmHDJyM8Q==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "e5a52845-f928-49e0-bf3c-aeeeed467619",
                            TwoFactorEnabled = false,
                            UserName = "factoryManager@mail.com"
                        },
                        new
                        {
                            Id = "6d5800ce-d726-4fc8-83d9-d6b3ac1f591e",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "31585798-04ff-495f-b86d-465cc3abd71d",
                            Email = "supervisor@mail.com",
                            EmailConfirmed = false,
                            LockoutEnabled = false,
                            NormalizedEmail = "supervisor@mail.com",
                            NormalizedUserName = "supervisor@mail.com",
                            PasswordHash = "AQAAAAEAACcQAAAAEA8QKVoktT5nSprvnEMgsDN/ZK7Z2m65IqkVbo8En25GYcKTTUpAlKqGMF/mUOPQuA==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "3d0bb8b9-2be2-4f2a-80db-bad137c9865c",
                            TwoFactorEnabled = false,
                            UserName = "supervisor@mail.com"
                        },
                        new
                        {
                            Id = "64a268d0-e995-41a0-a640-f9defb7f6f85",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "512d96d7-7c88-490f-b589-985365f017e9",
                            Email = "operator1@mail.com",
                            EmailConfirmed = false,
                            LockoutEnabled = false,
                            NormalizedEmail = "operator1@mail.com",
                            NormalizedUserName = "operator1@mail.com",
                            PasswordHash = "AQAAAAEAACcQAAAAEDyc3YvBFRI7EvRFGfrCY7Kl4lSGBwashnl0TUwb0U/GXtLtg+ZRwwh26t7xj9LEFA==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "a38b8a87-a51c-489b-9bdb-3de2d35b23f0",
                            TwoFactorEnabled = false,
                            UserName = "operator1@mail.com"
                        },
                        new
                        {
                            Id = "7e07d5d6-f082-454c-91c4-4c101a91aee0",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "7f7b11f5-bdda-4a67-bb04-e4db682a597e",
                            Email = "operator2@mail.com",
                            EmailConfirmed = false,
                            LockoutEnabled = false,
                            NormalizedEmail = "operator2@mail.com",
                            NormalizedUserName = "operator2@mail.com",
                            PasswordHash = "AQAAAAEAACcQAAAAEMrj9JmG82+5wnGpifBSTmG/REysG/VDtxY/i0duF9Zjl+E8Dmc7j3RfwSlOLkiKlQ==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "6c361fbe-4ae3-4898-875c-810cc747c2e1",
                            TwoFactorEnabled = false,
                            UserName = "operator2@mail.com"
                        },
                        new
                        {
                            Id = "82ebe75b-2512-4a2f-af3d-b9edf0d1ef5b",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "65fc8975-8885-41c9-b2e4-97158d992175",
                            Email = "operator3@mail.com",
                            EmailConfirmed = false,
                            LockoutEnabled = false,
                            NormalizedEmail = "operator3@mail.com",
                            NormalizedUserName = "operator3@mail.com",
                            PasswordHash = "AQAAAAEAACcQAAAAEMQYAwC8/xZc2ClpbCxgiS825FxRrgMw8p7QlZvXrPhj79B55eJ9V1BwJKREiP2pNg==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "f80025f8-f587-4288-a47a-33b004963cc6",
                            TwoFactorEnabled = false,
                            UserName = "operator3@mail.com"
                        },
                        new
                        {
                            Id = "c77fc444-d5a0-45c2-a576-667a021b6d1f",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "6041ac7f-6a6f-434d-a0f9-12f3b7d73642",
                            Email = "operator4@mail.com",
                            EmailConfirmed = false,
                            LockoutEnabled = false,
                            NormalizedEmail = "operator4@mail.com",
                            NormalizedUserName = "operator4@mail.com",
                            PasswordHash = "AQAAAAEAACcQAAAAEB4eaiDo+lo9PjDfKLakHDbThqw91cQvwqhX+/uevR72P0zhydPw0kQw/Tx3PpH9fg==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "6fecf333-54d2-4344-9112-9039f3740bd3",
                            TwoFactorEnabled = false,
                            UserName = "operator4@mail.com"
                        },
                        new
                        {
                            Id = "25cb202d-9873-432c-b049-f9184c3ce525",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "466387c1-8bf2-4b56-af5c-56b29592618e",
                            Email = "electrician1@mail.com",
                            EmailConfirmed = false,
                            LockoutEnabled = false,
                            NormalizedEmail = "electrician1@mail.com",
                            NormalizedUserName = "electrician1@mail.com",
                            PasswordHash = "AQAAAAEAACcQAAAAEKu92/ncM1PR3FnQvasIkVcCa7dCQez5/E7n7aZJuZ1iPv1qzF/rRJTrqtCSvECV1w==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "24d7ad61-80d0-4606-a02d-f4e3ca90d44f",
                            TwoFactorEnabled = false,
                            UserName = "electrician1@mail.com"
                        },
                        new
                        {
                            Id = "58434ec1-2216-4b26-869e-94db0c1f7d09",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "86f98fd2-b001-4628-8821-8e2c850517a7",
                            Email = "electrician2@mail.com",
                            EmailConfirmed = false,
                            LockoutEnabled = false,
                            NormalizedEmail = "electrician2@mail.com",
                            NormalizedUserName = "electrician2@mail.com",
                            PasswordHash = "AQAAAAEAACcQAAAAEOkJM4IDV90+/Qed+E0oRtdS4HR9VKPTy6EwaCAFZDonHnDsYeahXRZPZ9ytJIJ3dA==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "1de4e619-dbc3-4a57-b1db-f6990cfe2109",
                            TwoFactorEnabled = false,
                            UserName = "electrician2@mail.com"
                        },
                        new
                        {
                            Id = " 67905730 - 9c1f - 43fb - bf6b - e8dfd5abfd83",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "3f4b164b-71da-45f9-8c56-41b5219a45de",
                            Email = "operatorleave@mail.com",
                            EmailConfirmed = false,
                            LockoutEnabled = false,
                            NormalizedEmail = "operatorleave@mail.com",
                            NormalizedUserName = "operatorleave@mail.com",
                            PasswordHash = "AQAAAAEAACcQAAAAEE8CUxl6BBdsmnaJWYdl181re0OR/AFFEh+pm6L52Tutw/BOMz9ZzYHMJBtetZcUOg==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "0ae3d4cf-4aee-4ea7-9cce-79ca8286b0ee",
                            TwoFactorEnabled = false,
                            UserName = "operatorleave@mail.com"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("ProviderKey")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("RoleId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("LoginProvider")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("Name")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("SmartFactory.Infrastructure.Data.Career", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<DateTime>("DataOpen")
                        .HasColumnType("datetime2");

                    b.Property<int>("DaysActive")
                        .HasColumnType("int");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(5000)
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("PositionId")
                        .HasColumnType("int");

                    b.Property<string>("Qualifications")
                        .IsRequired()
                        .HasMaxLength(5000)
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("Id");

                    b.HasIndex("PositionId");

                    b.ToTable("Careers");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            DataOpen = new DateTime(2022, 12, 3, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DaysActive = 30,
                            Description = "1. Извършва подготвителни операции и монтаж на различни електрически инсталации. Следи за изправността, профилактиката и ремонта на електрическите мрежи, машини и съоръжения в сградите на работодателя.\r\nТрудови задачи и задължения, характеризиращи описанието на длъжността:\r\n2. Извършва монтаж и свързване на различни електрически табла;\r\n3. Извършва монтаж на елементите на електрообзавеждането или електро задвижването на производствени схеми;\r\n4. Следи за изправността на електрическите мрежи ,машини и съоръжения и определя необходимостта от ремонт.\r\n5. Прави профилактични проверка на техническото състояние на електрическите мрежи, машини и съоръжения.\r\n6. Извършва необходимият ремонт на електрическите мрежи, машини и съоръжения и отстранява технически повреди;\r\n7. Следи за правното прилагане на правилата за заземителните и гръмоотводните инсталации.\r\n8. Следи за изправността на измервателната техника .\r\n9. При необходимост изпълнява и други задачи, възложени във връзка с изпълнение на длъжността.",
                            PositionId = 3,
                            Qualifications = " Завършено висше/ средно образование с профил електротехника, електроенергетика и електрообзавеждане или автоматизация\r\n∙ Минимум 2 години опит по специалността в производствено предприятие",
                            Title = "Електротехник"
                        });
                });

            modelBuilder.Entity("SmartFactory.Infrastructure.Data.Employee", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("Address")
                        .IsRequired()
                        .HasMaxLength(150)
                        .HasColumnType("nvarchar(150)");

                    b.Property<int>("Age")
                        .HasColumnType("int");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<bool>("IsQuits")
                        .HasColumnType("bit");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<int?>("PositionId")
                        .HasColumnType("int");

                    b.Property<decimal>("Salary")
                        .HasColumnType("decimal(18,2)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("PositionId");

                    b.HasIndex("UserId");

                    b.ToTable("Employees");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Address = "ул. Гео Милев 13, София, България",
                            Age = 51,
                            FirstName = "Петър",
                            IsQuits = false,
                            LastName = "Петров",
                            PositionId = 1,
                            Salary = 10000.0m,
                            UserId = "dea12856-c198-4129-b3f3-b893d8395082"
                        },
                        new
                        {
                            Id = 2,
                            Address = "кв. Дружба 1 бл. 12 , вх. А, ап. 13, Плевен, България",
                            Age = 42,
                            FirstName = "Ангел",
                            IsQuits = false,
                            LastName = "Ангелов",
                            PositionId = 2,
                            Salary = 4762.20m,
                            UserId = "6d5800ce-d726-4fc8-83d9-d6b3ac1f591e"
                        },
                        new
                        {
                            Id = 3,
                            Address = "кв. Дружба 3 бл. 22 , вх. Б, ап. 7, Плевен, България",
                            Age = 48,
                            FirstName = "Иван",
                            IsQuits = false,
                            LastName = "Иванов",
                            PositionId = 3,
                            Salary = 2357.80m,
                            UserId = "25cb202d-9873-432c-b049-f9184c3ce525"
                        },
                        new
                        {
                            Id = 4,
                            Address = "ул. Търговска 11, Червен бряг, България",
                            Age = 34,
                            FirstName = "Димитър",
                            IsQuits = false,
                            LastName = "Димитров",
                            PositionId = 3,
                            Salary = 2027.34m,
                            UserId = "58434ec1-2216-4b26-869e-94db0c1f7d09"
                        },
                        new
                        {
                            Id = 5,
                            Address = "ул. Божурица 4, Плевен, България",
                            Age = 37,
                            FirstName = "Валери",
                            IsQuits = false,
                            LastName = "Атанасов",
                            PositionId = 4,
                            Salary = 1628.54m,
                            UserId = "64a268d0-e995-41a0-a640-f9defb7f6f85"
                        },
                        new
                        {
                            Id = 6,
                            Address = "ул. Янко Сакъзов 24, Плевен, България",
                            Age = 23,
                            FirstName = "Христо",
                            IsQuits = false,
                            LastName = "Христов",
                            PositionId = 4,
                            Salary = 1243.00m,
                            UserId = "7e07d5d6-f082-454c-91c4-4c101a91aee0"
                        },
                        new
                        {
                            Id = 7,
                            Address = "ул. Шипка 14, Плевен, България",
                            Age = 35,
                            FirstName = "Цветомир",
                            IsQuits = false,
                            LastName = "Цветанов",
                            PositionId = 5,
                            Salary = 1480.00m,
                            UserId = "82ebe75b-2512-4a2f-af3d-b9edf0d1ef5b"
                        },
                        new
                        {
                            Id = 8,
                            Address = "ул. Осогово 2, Плевен, България",
                            Age = 26,
                            FirstName = "Антон",
                            IsQuits = false,
                            LastName = "Антонов",
                            PositionId = 5,
                            Salary = 1343.00m,
                            UserId = "c77fc444-d5a0-45c2-a576-667a021b6d1f"
                        },
                        new
                        {
                            Id = 9,
                            Address = "ул. Шипка 2, Плевен, България",
                            Age = 63,
                            FirstName = "Надежда",
                            IsQuits = false,
                            LastName = "Георгиева",
                            PositionId = 5,
                            Salary = 2362.93m,
                            UserId = "67905730-9c1f-43fb-bf6b-e8dfd5abfd83"
                        });
                });

            modelBuilder.Entity("SmartFactory.Infrastructure.Data.Leave", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<DateTime>("DateLeave")
                        .HasColumnType("datetime2");

                    b.Property<int>("LeaveEmployeeId")
                        .HasColumnType("int");

                    b.Property<string>("Reason")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("LeaveEmployeeId");

                    b.ToTable("Leaves");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            DateLeave = new DateTime(2022, 11, 21, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            LeaveEmployeeId = 9,
                            Reason = "Пенсиониране по възраст"
                        });
                });

            modelBuilder.Entity("SmartFactory.Infrastructure.Data.Position", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(5000)
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("Id");

                    b.ToTable("Positions");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Description = "1. Ръководи цялостната дейност на търговското дружество/ клона на дружеството, съобразно изискванията на Търговския закон, разработената стратегия и правилата на добрата търговска практика.\r\nТрудови задачи и задължения, характеризиращи съдържанието на длъжността:\r\n2.Разработва бизнес план за дейността на дружеството/ клона на дружеството.\r\n3.Осигурява изпълнение на бизнес плана чрез най-добрия наличен технологичен, технически и кадрови ресурс.\r\n4.Отговаря на техническата и противопожарна безопасност в предприятието, както и за осигуряването на здравословни и безопасни условия на труд.\r\n5. Назначава и освобождава персонала в дружеството/ клона на търговското дружество\r\n6.Решава всички ръководни въпроси по дейността на дружеството/ клона на търговското дружество.",
                            Title = "Управител на фабриката"
                        },
                        new
                        {
                            Id = 2,
                            Description = "Координиране на цялостната организация на производствения процес – спазване на технологията на производство и работата на оборудването\r\nУчастие в изготвяне на производствени програми и последващ контрол\r\nАнализиране на разходите в съответствие с технологичните норми и отговорност за спазване на стандартите за качество\r\nРазработване на предложения за усъвършенстване на технологичното равнище на производството\r\nУчастие в обучението и повишаване квалификацията на работниците и служителите при усвояване на нови техника или технологии",
                            Title = "Ръководител производство"
                        },
                        new
                        {
                            Id = 3,
                            Description = "1. Извършва подготвителни операции и монтаж на различни електрически инсталации. Следи за изправността, профилактиката и ремонта на електрическите мрежи, машини и съоръжения в сградите на работодателя.\r\nТрудови задачи и задължения, характеризиращи описанието на длъжността:\r\n2. Извършва монтаж и свързване на различни електрически табла;\r\n3. Извършва монтаж на елементите на електрообзавеждането или електро задвижването на производствени схеми;\r\n4. Следи за изправността на електрическите мрежи ,машини и съоръжения и определя необходимостта от ремонт.\r\n5. Прави профилактични проверка на техническото състояние на електрическите мрежи, машини и съоръжения.\r\n6. Извършва необходимият ремонт на електрическите мрежи, машини и съоръжения и отстранява технически повреди;\r\n7. Следи за правното прилагане на правилата за заземителните и гръмоотводните инсталации.\r\n8. Следи за изправността на измервателната техника .\r\n9. При необходимост изпълнява и други задачи, възложени във връзка с изпълнение на длъжността.",
                            Title = "Електротехник"
                        },
                        new
                        {
                            Id = 5,
                            Description = "• Обслужваш и подпомагаш чрез ръчни операции работата на линията - товаро-разтоварни и преносни дейности;\r\n• Работиш с палетна количка и пренасяш кашони/касетки;\r\n• Контролираш и спазваш всички параметри на производствения процес, съгласно стандартите на съответното работно място;\r\n• Контролираш качеството на продукцията (входяща и изходяща) съгласно стандартите за съответното работно място;\r\n• При необходимост изпълняваш и други задачи, свързани с трудовия процес;\r\n• Извършваш почистване на работното място и съораженията, съгласно Инструкциите.",
                            Title = "Оператор пакетиране"
                        },
                        new
                        {
                            Id = 4,
                            Description = "Подготвя и контролира машините на производствената линия, следи за качеството на произвеждания продукт и спазва разходните норми за материали\r\nУчаства в текущата поддръжка на машините и отговаря за правилната им експлоатация\r\nГрижи се за почистването на машините и сортиране на отпадъците, според наличните процедури.",
                            Title = "Оператор подготовка"
                        });
                });

            modelBuilder.Entity("SmartFactory.Infrastructure.Data.Production", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<int>("AfterShiftBufer")
                        .HasColumnType("int");

                    b.Property<string>("Coment")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ComentDetails")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("Date")
                        .HasColumnType("datetime2");

                    b.Property<bool>("HasBeenReported")
                        .HasColumnType("bit");

                    b.Property<int>("ProcuctionPackaging")
                        .HasColumnType("int");

                    b.Property<int>("ProductionPreparation")
                        .HasColumnType("int");

                    b.Property<int?>("ShiftId")
                        .HasColumnType("int");

                    b.Property<int>("StockBeforePacking")
                        .HasColumnType("int");

                    b.Property<int>("TypeOfShift")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("ShiftId");

                    b.ToTable("Productions");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            AfterShiftBufer = 0,
                            Coment = "По време на сяната авария на пакетираща машина",
                            Date = new DateTime(2022, 12, 6, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            HasBeenReported = true,
                            ProcuctionPackaging = 63,
                            ProductionPreparation = 87,
                            ShiftId = 1,
                            StockBeforePacking = 0,
                            TypeOfShift = 0
                        },
                        new
                        {
                            Id = 2,
                            AfterShiftBufer = 0,
                            Coment = "По време на сяната нямаше аварии!",
                            Date = new DateTime(2022, 12, 6, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            HasBeenReported = true,
                            ProcuctionPackaging = 96,
                            ProductionPreparation = 82,
                            ShiftId = 1,
                            StockBeforePacking = 24,
                            TypeOfShift = 1
                        });
                });

            modelBuilder.Entity("SmartFactory.Infrastructure.Data.Shift", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<DateTime>("Date")
                        .HasColumnType("datetime2");

                    b.Property<int>("ElectricianId")
                        .HasColumnType("int");

                    b.Property<int>("OperatorPackagingId")
                        .HasColumnType("int");

                    b.Property<int>("OperatorPreparationId")
                        .HasColumnType("int");

                    b.Property<int>("TypeOfShift")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("ElectricianId");

                    b.HasIndex("OperatorPackagingId");

                    b.HasIndex("OperatorPreparationId");

                    b.ToTable("Shifts");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Date = new DateTime(2022, 12, 6, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            ElectricianId = 3,
                            OperatorPackagingId = 7,
                            OperatorPreparationId = 5,
                            TypeOfShift = 0
                        },
                        new
                        {
                            Id = 2,
                            Date = new DateTime(2022, 12, 6, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            ElectricianId = 4,
                            OperatorPackagingId = 8,
                            OperatorPreparationId = 6,
                            TypeOfShift = 1
                        },
                        new
                        {
                            Id = 3,
                            Date = new DateTime(2022, 12, 7, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            ElectricianId = 3,
                            OperatorPackagingId = 7,
                            OperatorPreparationId = 5,
                            TypeOfShift = 0
                        },
                        new
                        {
                            Id = 4,
                            Date = new DateTime(2022, 12, 7, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            ElectricianId = 4,
                            OperatorPackagingId = 8,
                            OperatorPreparationId = 6,
                            TypeOfShift = 1
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("SmartFactory.Infrastructure.Data.Career", b =>
                {
                    b.HasOne("SmartFactory.Infrastructure.Data.Position", "Position")
                        .WithMany()
                        .HasForeignKey("PositionId");

                    b.Navigation("Position");
                });

            modelBuilder.Entity("SmartFactory.Infrastructure.Data.Employee", b =>
                {
                    b.HasOne("SmartFactory.Infrastructure.Data.Position", "Position")
                        .WithMany("Employees")
                        .HasForeignKey("PositionId");

                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Position");

                    b.Navigation("User");
                });

            modelBuilder.Entity("SmartFactory.Infrastructure.Data.Leave", b =>
                {
                    b.HasOne("SmartFactory.Infrastructure.Data.Employee", "LeaveEmployee")
                        .WithMany()
                        .HasForeignKey("LeaveEmployeeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("LeaveEmployee");
                });

            modelBuilder.Entity("SmartFactory.Infrastructure.Data.Production", b =>
                {
                    b.HasOne("SmartFactory.Infrastructure.Data.Shift", "Shift")
                        .WithMany()
                        .HasForeignKey("ShiftId");

                    b.Navigation("Shift");
                });

            modelBuilder.Entity("SmartFactory.Infrastructure.Data.Shift", b =>
                {
                    b.HasOne("SmartFactory.Infrastructure.Data.Employee", "Electrician")
                        .WithMany()
                        .HasForeignKey("ElectricianId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("SmartFactory.Infrastructure.Data.Employee", "OperatorPackaging")
                        .WithMany()
                        .HasForeignKey("OperatorPackagingId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("SmartFactory.Infrastructure.Data.Employee", "OperatorPreparation")
                        .WithMany()
                        .HasForeignKey("OperatorPreparationId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Electrician");

                    b.Navigation("OperatorPackaging");

                    b.Navigation("OperatorPreparation");
                });

            modelBuilder.Entity("SmartFactory.Infrastructure.Data.Position", b =>
                {
                    b.Navigation("Employees");
                });
#pragma warning restore 612, 618
        }
    }
}
